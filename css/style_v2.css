#conteneur {
	font-family: HelveticaNeue, RobotoLight;
	width:50%;
	margin:auto;
	background-color: red;
	border-color: black;
	flex-wrap: wrap;
	border: green dashed 4px;
}

/* --------------------- HEADER */
header {
	display: flex;
	flex-direction: row-reverse; /* le "entete" est avant le "portrait", d'où la nécéssité de les inverser */
	width: 100%;
	background-color: green;
}

#entete {
	display: flex;
	flex: 2;
	flex-direction: column;
	justify-content: center;
	padding: 3% 3%;
	background-color: violet;
}

#nom {
	font-size: 2.5rem;
}

#portrait  {
	flex: 1;
	padding: 3% 1.5%;
	background-color: yellow;
}

#portrait img {
	width: 80%;
	box-sizing: border-box;
	clip-path: circle(50% at center); 
	display: flex;
	margin : auto;
	border-width: : 20px;
}

/* --------------------- MAIN */
main {
	display: flex;
	text-align: justify;
	flex-direction: row-reverse; /* l'aside est placé après le section dans le html, d'où la nécéssité de les inverser */
}

	/* ------------------------------------------  SECTION */
section {
	flex: 2 12%; /* prend 2x plus de place que "aside" | flex : avec deux valeurs, si la seconde valeur est une valeur de largeur valide (width) : celle-ci est alors interprétée comme la valeur de <flex-basis>*/
	padding: 6%; /* vertical puis horizontal*/
	background-color: grey;
} 

	/* ------------------------------------------  ASIDE */
aside {
	flex: 1;
	padding: 6%; /* avec un nombre sans unité (<number>) : celui-ci est alors interprété comme la valeur de <flex-grow> */
	background-color: orange;
}

aside img {
	width: 20%;
	justify-content:flex-start;
}

/* --------------------- AUTRES */
h1, h2, #nom {
	text-transform: uppercase;
	text-align: left;
}

/* FONTS : https://www.smashingmagazine.com/2013/02/setting-weights-and-styles-at-font-face-declaration/ */

@font-face { /* regular */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Regular-02.ttf') format('truetype');
    src: url('../font/HelveticaNeue/HelveticaNeue-Regular-02.woff') format('woff');
    src: url('../font/HelveticaNeue/HelveticaNeue-Regular-02.otf') format('opentype');
    font-weight: normal;
    font-style: normal;
}

@font-face { /* medium */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Medium-11.ttf') format('truetype');
    font-weight: bold;
}

@font-face { /* bold */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Bold-01.ttf') format('truetype');
    font-weight: bolder;
}

@font-face { /* regular italic */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Italic-04.ttf') format('truetype');
    font-style: italic; /* oblique et italique ne peuvent être séparé par une virgule depuis CSS3 */
}

@font-face { /* regular oblique */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Italic-04.ttf') format('truetype');
    font-style: oblique;
}

@font-face { /* light */
    font-family: 'HelveticaNeue';
    src: url('../font/HelveticaNeue/HelveticaNeue-Light-05.ttf') format('truetype');
    font-weight: lighter;
}

@font-face {
    font-family: 'RobotoLight';
    src: url('../font/RobotoLight/Roboto-Light-webfont.eot');
    src: url('../font/RobotoLight/Roboto-Light-webfont.eot?#iefix') format('embedded-opentype'),
         url('../font/RobotoLight/Roboto-Light-webfont.woff') format('woff'),
         url('../font/RobotoLight/Roboto-Light-webfont.ttf') format('truetype'),
         url('../font/RobotoLight/Roboto-Light-webfont.svg#robotolight') format('svg');
    font-weight: normal;
    font-style: normal;
}

.font-medium {
	font-weight: bolder; /* bold ou bolder : il utilise la meme */
	}

.font-light {
	font-weight: lighter; /* ne marche oas : tjr regular */
}


/* 
problème : les backgrounds
comment faire pour que les backgrounds se retrouvent dans le header alors qu'ils ne devraient s'appliquer qu'aux aside et section ?
solution : diviser le header en deux, en faisant attention aux marges etc pour être bien aligné sur la répartition 2tiers / 1tiers du main, puis appliquer les même backgrounds, au moyen de variable ?

problème : les flex (grow, shrink et basis)
je mettais un flex 1 et flex sur les deux parties côtes à côtes, avec un padding relatif (en%).
hors, je ne comprenais pas pq, le bloc aside semblait avoir un pb de marge suppélementaire : il était légèrement plus grand que le tiers de l'espace.
j'ai d'abords maudit le flex. puis j'ai tenté en poucentage avec un width : suprise, le résultat est le même !
plus j'ai supprimer les padding, et c'est là que j'ai compris le problème : ils étaient en relatifs, et donc calculer par rapport à l'élément parent
tentative 1 : calculer un padding relatif égale pour chaque partie. au moyen de variable ? dans le cas présent : padding décidé x (1/3) = padding variable x (2/3) | donc padding variabe = ((padding décidé x (1/3)) / 2/3 ) | avec 3% on a x = 3% x ((1/3)/2/3) = 1,5% (à écrire 1.5% avec un point);
les poucentages montrent des limites, les padding de aside et section ne font pas la même taille / je ne comprend pas pq le padding augmente la taille du tiers de flex... tout aurait été plus simple ! ;
tentative 2 : est avec box-izing : non-concluant, rien ne change, le width de la flexbox n'est pas pris en compte.
tentative 3 : avec flex grow shrink et basis étonnant, mais inversé, et pas précis.
solution : utilisation des proprité précises de flex recommandées ici : https://developer.mozilla.org/fr/docs/Web/CSS/flex#Syntaxe
insertion du double padding l'aside ;

problème : la police utilisée ne ressemble à aucune de Dafont ou Google Font
tentative 1 : grâce à whatmyfont, j'ai trouvé qu'il s'agissait de Helvetica Neue ; malheureusement, elle est propriétaire et font squirrel refuse de générer une police black listée... donc je la double de Roboto Light.
mais il faut specifier les police avec des font-weight qui ne marchent pas ! je ne sais plus vraiment quoi faire..;

problème : le puces
comment faire des puces ? et des puces avec un cercles autour ? et des puces avec un couleur paramétrable ?

défi : faire un CV entièrement scalable, presque pas besoin de mediaqueries, juste des breakpoints en min-widht et flex-wrap etc.;
*/